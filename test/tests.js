test("Factory.define(type, constrFn).defaults(obj)", function() {
  var turtle = {},
      bird = {};

  expect(4);

  // Check for the right errors to happen
  throws(
    function() {
      Factory.define("player", "not a function");
    },
    /constrFn is not a function/,
    "raises error, constrFn is not a function"
  );

  throws(
    function() {
      Factory.define("player", function() {});
      Factory.define("player", function() {});
    },
    /already defined/,
    "raises error, type was already defined"
  );

  // Check for defaults chained function
  Factory.define("turtle", function() {}).defaults({
                     name: "Donatelo"
                 });
  turtle = Factory.build("turtle");

  equal(turtle.name, "Donatelo", "defaults() adds default properties");

  // constrFn parameter is optional
  Factory.define("bird").defaults({
    canFly: true
  });

  bird = Factory.build("bird");

  ok(bird.canFly, "the constrFn param is optional");
  Factory.clean();
});

test("Factory.clean()", function() {
  expect(2);
  // Check for cleaning all the defined constructors
  var foo;
  Factory.define("foo");
  foo = Factory.build("foo");
  notStrictEqual(typeof foo, "undefined", "Factory build the defined object");
  // call clean method
  Factory.clean();
  throws(
    function() {
      var foo = Factory.build("foo");
    },
    /doesn't exist/,
    "Factory was cleaned"
  );
});

test("Factory.build(type)", function() {
  expect(2);

  // Check for building objects
  var SimpleObjectConstructor = function() {
    this.name = "simple";
  },
  aSimpleObject = {};

  Factory.define("simple", SimpleObjectConstructor);
  aSimpleObject = Factory.build("simple");

  ok(aSimpleObject, "it builds a object");

  // Check for right errors
  throws(
    function() {
      Factory.build("nonexistent");
    },
    /doesn't exist/,
    "raises error, constructor type doesn't exists"
  );
  Factory.clean();
});

test("Factory.buildList(type, quantity)", function() {

  // Check for building a list of objects
  var ComputerConstructor = function() {
    this.brand = "Apple";
  },
  computerList = [],
  computersCount = 10,
  i = 0;

  Factory.define("computer", ComputerConstructor).sequence("id").sequence("name", function (i) { return "Computer " + i; });
  computerList = Factory.buildList("computer", computersCount);

  equal(computerList.length, computersCount, "built the right amount of objects");

  for(i = 0; i < computersCount; i += 1) {
    equal(computerList[i].id, i + 1, "progressive id numbers generated by the sequence function");
    equal(computerList[i].name, "Computer " + (i + 1), "progresive names are generated with a function provided to the sequence helper");
  }
  Factory.clean();
});
